/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DVORAK 0
#define NAV 1
#define SYM 2
#define BT 3

//      name        reference  key1 key2 
#define TD_CAPLOCK  &td0    // LSHIFT CAPSLOCK 

/ {

behaviors{  

   td0: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_0"; 
      #binding-cells = <0>; 
      tapping-term-ms = <200>; 
      bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;

      }; 
   };


    // LAYERS
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

combos {
compatible = "zmk,combos";

// COPY
        combo_copy {
        timeout-ms = <50>;
        key-positions = <24 8>;  // CTRL + C
        bindings = <&kp LC(C)>;
};

// PASTE
        combo_paste {
        timeout-ms = <50>;
        key-positions = <24 33>;  // CTRL + V
        bindings = <&kp LC(V)>;
};

// CUT
        combo_cut {
        timeout-ms = <50>;
        key-positions = <24 29>;  // CTRL + X
        bindings = <&kp LC(X)>;
};

// CONSOLA VSC
        combo_clg {
        timeout-ms = <50>;
        key-positions = <24 27>;  // CTRL + J
        bindings = <&kp LC(J)>;
};

// ARCHIVO VSC
        combo_arch {
        timeout-ms = <50>;
        key-positions = <24 30>;  // CTRL + B
        bindings = <&kp LC(B)>;
};

};

        keymap {
                compatible = "zmk,keymap";

                default_layer_dvorak {
// -----------------------------------------------------------------------------------------------------------
// |  ESC       |  ,  |  ;  |  Ã‘    |  P    |  Y    |            |  F    |  G    |  C    |  H  |  L  |  BSPC |
// |  SHFT:CAP  |  A  |  O  |  E    |  U    |  I    |            |  D    |  R    |  T    |  N  |  S  |  DEL  |
// |  CTRL      |  .  |  Q  |  J    |  K    |  X    |            |  B    |  M    |  W    |  V  |  Z  |  TAB  |
//                          |  GUI  |  LWR  |  SPC  |            |  ENT  |  RSE  |  ALT  |
                        bindings = <
   &kp  ESC    &kp  COMMA  &kp  SEMI  &kp  SEMI  &kp  P  &kp  Y            &kp   F   &kp  G  &kp  C     &kp  H  &kp  L  &kp  BSPC
   TD_SCLOCK   &kp  A      &kp  O     &kp  E     &kp  U  &kp  I            &kp   D   &kp  R  &kp  T     &kp  N  &kp  S  &kp  DEL
   &kp  LCTRL  &kp  DOT    &kp  Q     &kp  J     &kp  K  &kp  X            &kp   B   &kp  M  &kp  W     &kp  V  &kp  Z  &kp  TAB
                                      &kp  LGUI  &mo  1  &kp  SPACE        &kp  RET  &mo  2  &kp  RALT
                        >;
                };

                 lower_layer {
// -----------------------------------------------------------------------------------------------------------------
// |  COPY   |           |  HOME  |  PGUP  |  PGDN  |  END  |            |  7  |  8  |  9  |       |  UP   |       |
// |  PASTE  |  ARCHIVO  |        |        |        |       |            |  4  |  5  |  6  |  LFT  |       |  RGT  |
// |  CUT    |  CONSLG   |        |        |        |       |            |  1  |  2  |  3  |       |  DWN  |       |
//                                |        |        |       |            |     |     |  0  |
                        bindings = <
   &kp LC(C)  &kp              &kp  HOME  &kp  PG_UP  &kp  PG_DN  &kp  END            &kp  N7  &kp  N8  &kp  N9  &none      &kp  UP     &trans
   &kp LC(V)  &kp LC(B)        &trans     &trans      &trans      &trans              &kp  N4  &kp  N5  &kp  N6  &kp  LEFT  &none       &kp  RIGHT 
   &kp LC(X)  &kp LC(J)        &trans     &trans      &trans      &trans              &kp  N1  &kp  N2  &kp  N3  &none      &kp  DOWN   &none
                                          &none       &none       &trans              &trans   &none    &kp  N0
                        >;
                };

                raise_layer {
// -------------------------------------------------------------------------------------------
// |  TAB   |  !  |  @  |  #  |  $  |  %  |            |  ^  |  &  |  *  |  (  |  )    |     |
// |  CTRL  |     |     |     |     |     |            |  -  |  =  |  [  |  ]  |  \    |  `  |
// |  SHFT  |     |     |     |     |     |            |  _  |  +  |  {  |  }  |  "|"  |  ~  |
//                     |     |     |     |            |     |     |     |
                        bindings = <
   &kp  TAB    &kp  EXCL  &kp  AT  &kp  HASH  &kp  DLLR  &kp  PRCNT            &kp  CARET  &kp  AMPS   &kp  ASTRK  &kp  LPAR  &kp  RPAR  &trans
   &kp  LCTRL  &trans     &trans   &trans     &trans     &trans                &kp  MINUS  &kp  EQUAL  &kp  LBKT   &kp  RBKT  &kp  BSLH  &kp  GRAVE
   &kp  LSHFT  &trans     &trans   &trans     &trans     &trans                &kp  UNDER  &kp  PLUS   &kp  LBRC   &kp  RBRC  &kp  PIPE  &kp  TILDE
                                   &none      &none      &trans                &trans      &none       &none
                        >;
                };

                 bt_media_layer {
// -------------------------------------------------------------------------------------------------------------
// |  F1     |  F2   |  F3   |  F4   |  F5   |  F6   |            |  F7  |  F8  |  F9  |  F10  |   F11 |  F12  |
// |  BTCLR  |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |            |      |      |      |       |       |       |
// |         |       |       |       |       |   Y    |            |   R   |      |      |       |       |       |
//                           |       |       |       |            |      |      |      |
                        bindings = <
   &kp F1       &kp F2         &kp F3         &kp F4         &kp F5         &kp F6                   &kp F7    &kp F8    &kp F9    &kp F10    &kp F11    &kp F12
   &bt  BT_CLR  &bt  BT_SEL 0  &bt  BT_SEL 1  &bt  BT_SEL 2  &bt  BT_SEL 3  &bt  BT_SEL 4            &trans    &trans    &trans    &trans     &trans     &trans
   &trans       &trans         &trans         &trans         &trans         &kp Y                    &kp R     &trans    &trans    &trans     &trans     &trans
                                              &none          &none          &trans                   &trans    &none     &none
                        >;
                };
        };
};
