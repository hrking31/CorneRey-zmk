/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define NAV 3
#define LED 4
#define FUN 5

#define COMBO(NAME, BINDINGS, KEYPOS) \
   combo_##NAME { \
   timeout-ms = <200>; \
   bindings = BINDINGS; \
   key-positions = <KEYPOS>; \
   layers = <0>; \
};

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)
#define MACRO(NAME, BINDINGS) \
  mcr_##NAME: mcr_##NAME { \
    label = EXPAND_AND_STRINGIFY(mcr_##NAME); \
    compatible = "zmk,behavior-macro"; \
    #binding-cells = <0>; \
    wait-ms = <20>; \
    tap-ms = <10>; \
    bindings = <BINDINGS>; \
  };

&led_strip {
    chain-length = <27>;
};

/ {
  macros {
    MACRO(config, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp B &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(left, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp LEFT &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(right, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp RIGHT &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(wleft, &macro_press &kp LCTRL &macro_press &kp RGUI &macro_tap &kp LEFT &macro_release &kp RGUI &macro_release &kp LCTRL)
    MACRO(wright, &macro_press &kp LCTRL &macro_press &kp RGUI &macro_tap &kp RIGHT &macro_release &kp RGUI &macro_release &kp LCTRL)
    MACRO(selright, &macro_press &kp LCTRL &macro_press &kp RSHFT &macro_tap &kp RIGHT &macro_release &kp RSHFT &macro_release &kp LCTRL)
    MACRO(selleft, &macro_press &kp LCTRL &macro_press &kp RSHFT &macro_tap &kp LEFT &macro_release &kp RSHFT &macro_release &kp LCTRL)
    MACRO(focoa, &macro_press &kp LCTRL &macro_press &kp RSHFT &macro_tap &kp E &macro_release &kp RSHFT &macro_release &kp LCTRL)
  };
};

/ {
  combos {
    compatible = "zmk,combos";

    // CTRL + C
    COMBO(copy, <&kp LC(C)>, 24 8)

    // CTRL + V
    COMBO(paste, <&kp LC(V)>, 24 33)

    // CTRL + X
    COMBO(cut, <&kp LC(X)>, 24 29)

    // CTRL + Z
    COMBO(atra, <&kp LC(Z)>, 24 34)

    // CTRL + Y
    COMBO(adel, <&kp LC(Y)>, 24 5)

    // CTRL + J
    COMBO(clg, <&kp LC(J)>, 24 27)

    // CTRL + B
    COMBO(arch, <&kp LC(B)>, 24 30)

    // ALT + UP
    COMBO(up, <&kp LA(UP)>, 12 4)

    // ALT + DOWN
    COMBO(down, <&kp LA(DOWN)>, 12 18)

    // SHFT + RIGHT
    COMBO(selright, <&kp LS(RIGHT)>, 36 12)

    // SHFT  + LEFT
    COMBO(selleft, <&kp LS(LEFT)>, 36 9)

    // SHFT  + UP
    COMBO(selup, <&kp LS(UP)>, 36 4)

    // SHFT + DOWN
    COMBO(seldown, <&kp LS(DOWN)>, 36 18)

    // CTRL + llaves
    COMBO(comentar, <&kp LC(BSLH)>, 24 22)

    // RALT + Q
    COMBO(arroba, <&kp RA(Q)>, 12 26)

    // CTRL + A
    COMBO(narchivo, <&kp LC(A)>, 24 13)

    // CTRL + E
    COMBO(ncarpeta, <&kp LC(E)>, 24 15)

    // SHFT  + /
    COMBO(menos, <&kp LS(SLASH)>, 36 4)
  };
};

 / {
        keymap {
                compatible = "zmk,keymap";

                   default_layer {
            label = "DEF";
// --------------------------------------------------------------------------------------------------------
// |  ESC   |  ,  |  @  |  Ñ     |  P    |  Y    |            |  F    |  G    |  C    |  H  |  L  |  BSPC |
// |  ALT   |  A  |  O  |  E     |  U    |  I    |            |  D    |  R    |  T    |  N  |  S  |  DEL  |
// |  CTRL  |  .  |  Q  |  J     |  K    |  X    |            |  B    |  M    |  W    |  V  |  Z  |  TAB  |
//                      |  SHFT  |  NUM  |  SPC  |            |  ENT  |  SIM  |  GUI  |

                        bindings = < 
   &kp  ESC    &kp  COMMA  &kp  RA(Q)  &kp  SEMI   &kp  P    &kp  Y            &kp  F    &kp  G    &kp  C     &kp  H  &kp  L  &kp  BSPC
   &kp  LALT   &kp  A      &kp  O     &kp  E       &kp  U    &kp  I            &kp  D    &kp  R    &kp  T     &kp  N  &kp  S  &kp  DEL
   &kp  LCTRL  &kp  DOT    &kp  Q     &kp  J       &kp  K    &kp  X            &kp  B    &kp  M    &kp  W     &kp  V  &kp  Z  &kp  TAB
                                      &kp  LSHFT   &mo  NUM  &kp  SPACE        &kp  RET  &mo  SYM  &kp  RGUI
                        >;
                };

                 number_layer {
            label = "NUM";
// --------------------------------------------------------------------------------------------------------------------------------------------------
// |  ESC   |  0          |  1          |  2     |  3          |  4     |            |  5     |  6       |  7      |  8        |  9        |  BSPC  |
// |  ALT   |  N-CARPETA  |  N-ARCHIVO  |  HOME  |  CODE-UP    |  ATRA  |            |  UP    |  COPY    |  PASTE  |  CUT      |  COMENTA  |  DEL   |
// |  CTRL  |  LEFT       |  RIGHT      |  END   |  CODE-DOWN  |  ADEL  |            |  DOWN  |  CONFIG  |  CONSL  |  ARCHIVO  |  FOCO-A   |  TAB   |
//                                      |  SHFT  |  NUM        |  SPC   |            |  ENT   |  SYM     |  GUI    |

                        bindings = <
   &trans  &kp  N0    &kp  N1     &kp  N2    &kp  N3        &kp  N4                &kp  N5     &kp  N6      &kp  N7     &kp  N8      &kp  N9        &trans
   &trans  &kp LC(A)  &kp LC(E)   &kp  HOME  &kp  LA(UP)    &kp LC(Z)              &kp  UP     &kp  LC(C)   &kp  LC(V)  &kp  LC(X)   &kp  LC(BSLH)  &trans
   &trans  &kp  LEFT  &kp  RIGHT  &kp  END   &kp  LA(DOWN)  &kp LC(Y)              &kp  DOWN   &mcr_config  &kp  LC(J)  &kp  LC(B)   &mcr_focoa     &trans
                                  &trans     &trans         &trans                 &trans      &mo NAV      &mo FUN
                        >;
                };

               symbol_layer {
            label = "SYM";
// ---------------------------------------------------------------------------------------------------------------
// |  ESC   |  ¡  |  "  |  #     |  $    |  %    |            |  P-SCREEN  |       |  '    |  ´  |  !   |  BSPC  |
// |  ALT   |  [  |  {  |  (     |  |    |  ¿    |            |  ?         |  &    |   )   |  }  |  ]   |  DEL   |
// |  CTRL  |  +  |  -  |  *     |  /    |  =    |            |            |       |       |  _  |  °   |  TAB   |
//                      |  SHFT  |  NUM  |  SPC  |            |  ENT       |  SYM  |  GUI  |

                        bindings = <
   &trans  &kp  PLUS   &kp  AT          &kp  HASH   &kp  DLLR   &kp  PRCNT             &kp PSCRN   &none       &kp  MINUS  &kp  LBKT   &kp  EXCL   &trans
   &trans  &kp  DQT    &kp  APOSTROPHE  &kp  ASTRK  &kp  GRAVE  &kp  EQUAL             &kp  UNDER  &kp  CARET  &kp  LPAR   &kp  BSLH   &kp  PIPE   &trans
   &trans  &kp  RBKT   &kp LS(SLASH)    &kp  RBRC   &kp  AMPS   &kp  RPAR              &none       &none       &none       &kp  UNDER  &kp  TILDE  &trans
                                        &trans      &mo LED     &trans                 &trans      &trans      &trans
                        >;
                };

                 navigate_layer {
            label = "NAV";
// ---------------------------------------------------------------------------------------------------------------------------
// |  ESC   |     |  PGUP    |  SEL-L-P  |       |       |            |       |       |  SEL-R-P  |  SEL-UP    |    |  BSPC  |
// |  ALT   |     |  PGDN    |  SEL-L-L  |       |       |            |       |       |  SEL-R-L  |  SEL-DOWN  |    |  DEL   |
// |  CTRL  |     |  W-LEFT  |  CODE-LF  |       |       |            |       |       |  CODE-RG  |  W-RIGHT   |    |  TAB   |
//                           |  SHFT     |  NUM  |  SPC  |            |  ENT  |  SYM  |  GUI      |

                        bindings = <
   &trans  &none  &kp  PG_UP  &mcr_selleft   &none   &none               &none    &none   &mcr_selright  &kp  LS(UP)   &none  &trans
   &trans  &none  &kp  PG_DN  &kp  LS(LEFT)  &none   &none               &none    &none   &kp LS(RIGHT)  &kp LS(DOWN)  &none  &trans
   &trans  &none  &mcr_wleft  &mcr_left      &none   &none               &none    &none   &mcr_right     &mcr_wright   &none  &trans
                              &trans         &trans  &trans              &trans   &trans  &trans
                        >;
                };

                 led_layer {
            label = "LED";
// ---------------------------------------------------------------------------------------------------------------
// |     |     |  SP-D  |  EF-D    |       |       |            |       |       |  EF-I    |  SP-I   |     |     |
// |     |     |  SA-D  |  BR-D    |       |       |            |       |       |  BR-I    |  SA-I   |     |     |
// |     |     |  RGB   |  TONO-D  |       |       |            |       |       |  TONO-I  |  POWER  |     |     |
//                      |  SHFT    |  NUM  |  SPC  |            |  ENT  |  SYM  |  GUI     |

                        bindings = <
   &none  &none  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &none   &none          &none   &none   &rgb_ug RGB_EFF  &rgb_ug RGB_SPI    &none  &none
   &none  &none  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &none   &none          &none   &none   &rgb_ug RGB_BRI  &rgb_ug RGB_SAI    &none  &none
   &none  &none  &rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &none   &none          &none   &none   &rgb_ug RGB_HUI  &ext_power EP_TOG  &none  &none
                                  &trans           &trans  &trans         &trans  &trans  &trans
                        >;
                };

                 function_layer {
            label = "FUN";
// ------------------------------------------------------------------------------------------------------------------------
// |  F1    |  F2     |  F3   |  F4    |  F5   |  F6   |            |  F7   |  F8      |  F9   |  F10   |   F11  |  F12   |
// |  ALT   |  BT1    |  BT2  |  BT3   |  BT4  |  BT5  |            |  PRV  |  PLAY/P  |  NXT  |  VOL-  |  MUTE  |  VOL+  |
// |  CTRL  |  BTCLR  |       |        |       |       |            |       |          |       |        |        |  TAB   |
//                            |  SHFT  |  NUM  |  SPC  |            |  ENT  |  SYM     |  GUI  |

                        bindings = <
   &kp  F1  &kp  F2        &kp  F3        &kp  F4        &kp  F5        &kp  F6                  &kp  F7      &kp  F8    &kp  F9      &kp  F10       &kp  F11     &kp  F12
   &trans   &bt  BT_SEL 0  &bt  BT_SEL 1  &bt  BT_SEL 2  &bt  BT_SEL 3  &bt  BT_SEL 4            &kp  C_PREV  &kp  C_PP  &kp  C_NEXT  &kp  C_VOL_DN  &kp  C_MUTE  &kp  C_VOL_UP
   &trans   &bt  BT_CLR    &none          &none          &none          &none                    &none        &none      &none        &none          &none        &trans
                                          &trans         &trans         &trans                   &trans       &trans     &trans
                        >;
                };
        };
};

