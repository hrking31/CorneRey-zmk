/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define FUN 3

#define COMBO(NAME, BINDINGS, KEYPOS) \
   combo_##NAME { \
   timeout-ms = <200>; \
   bindings = BINDINGS; \
   key-positions = <KEYPOS>; \
   layers = <0>; \
};

#define STRINGIFY(x) #x
#define EXPAND_AND_STRINGIFY(x) STRINGIFY(x)
#define MACRO(NAME, BINDINGS) \
  mcr_##NAME: mcr_##NAME { \
    label = EXPAND_AND_STRINGIFY(mcr_##NAME); \
    compatible = "zmk,behavior-macro"; \
    #binding-cells = <0>; \
    wait-ms = <20>; \
    tap-ms = <10>; \
    bindings = <BINDINGS>; \
  };

/ {
  macros {
    MACRO(config, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp B &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(left, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp LEFT &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(right, &macro_press &kp LCTRL &macro_press &kp LALT &macro_tap &kp RIGHT &macro_release &kp LALT &macro_release &kp LCTRL)
    MACRO(wleft, &macro_press &kp LCTRL &macro_press &kp GUI &macro_tap &kp LEFT &macro_release &kp GUI &macro_release &kp LCTRL)
    MACRO(wright, &macro_press &kp LCTRL &macro_press &kp GUI &macro_tap &kp RIGHT &macro_release &kp GUI &macro_release &kp LCTRL)
  };
};

/ {
  combos {
    compatible = "zmk,combos";

    // CTRL + C
    COMBO(copy, <&kp LC(C)>, 24 8)

    // CTRL + V
    COMBO(paste, <&kp LC(V)>, 24 33)

    // CTRL + X
    COMBO(cut, <&kp LC(X)>, 24 29)

    // CTRL + Z
    COMBO(atra, <&kp LC(Z)>, 24 34)

    // CTRL + Y
    COMBO(adel, <&kp LC(Y)>, 24 5)

    // CTRL + J
    COMBO(clg, <&kp LC(J)>, 24 27)

    // CTRL + B
    COMBO(arch, <&kp LC(B)>, 24 30)

    // ALT + UP
    COMBO(up, <&kp LA(UP)>, 36 18)

    // ALT + DOWN
    COMBO(down, <&kp LA(DOWN)>, 36 27)

  };
};
 
 / {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM NUM>;
            then-layer = <FUN>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                   default_layer {
            label = "DEF";
// --------------------------------------------------------------------------------------------------------
// |  ESC   |  ,  |  !  |  Ã‘     |  P    |  Y    |            |  F    |  G    |  C    |  H  |  L  |  BSPC |
// |  TAB   |  A  |  O  |  E     |  U    |  I    |            |  D    |  R    |  T    |  N  |  S  |  DEL  |
// |  CTRL  |  .  |  Q  |  J     |  K    |  X    |            |  B    |  M    |  W    |  V  |  Z  |  GUI  |
//                      |  SHFT  |  NUM  |  SPC  |            |  ENT  |  SIM  |  ALT  |

                        bindings = < 
   &kp  ESC    &kp  COMMA  &kp  EXCL  &kp  SEMI    &kp  P    &kp  Y            &kp  F    &kp  G    &kp  C     &kp  H  &kp  L  &kp  BSPC
   &kp  TAB    &kp  A      &kp  O     &kp  E       &kp  U    &kp  I            &kp  D    &kp  R    &kp  T     &kp  N  &kp  S  &kp  DEL
   &kp  LCTRL  &kp  DOT    &kp  Q     &kp  J       &kp  K    &kp  X            &kp  B    &kp  M    &kp  W     &kp  V  &kp  Z  &kp  GUI
                                      &kp  LSHFT   &mo  NUM  &kp  SPACE        &kp  RET  &mo  SYM  &kp  ALT
                        >;
                };

                 number_layer {
            label = "NUM";
// ----------------------------------------------------------------------------------------------------------------------------------------------
// |  1       |  2      |  3     |  4     |  5         |  6     |            |  7      |  8        |  9       |  0        |  CONSLA  |  BSPC    |
// |  LEFT    |         |        |        |  CODEUP    |  ATRA  |            |  UP     |  COPY     |  PASTE   |  CUT      |  RIGHT   |  DEL     |
// |  CODELF  |  WLEFT  |        |        |  CODEDOWN  |  ADEL  |            |  DOWN   |  ARCHIVO  |  CONFIG  |           |  WRIGHT  |  CODERG  |
//                               |        |  NUM       |  SPC   |            |  ENT    |  SYM      |  RALT    |

                        bindings = <
   &kp  N1    &kp  N2     &kp  N3   &kp  N4     &kp  N5        &kp  N6                &kp  N7     &kp  N8     &kp  N9      &kp  N0     &kp  LC(J)     &trans
   &kp  LEFT  &kp         &kp        &kp        &kp  LA(UP)    &kp LC(Z)              &kp  UP     &kp  LC(C)  &kp  LC(V)   &kp  LC(X)  &kp  RIGHT     &trans
   &mcr_left  &mcr_wleft  &none     &none       &kp  LA(DOWN)  &kp LC(Y)              &kp  DOWN   &kp  LC(B)  &mcr_config  &none       &mcr_wright    &mcr_right
                                    &trans       &trans         &trans                 &trans      &trans      &trans  
                        >;
                };

               symbol_layer {
            label = "SYM";
// ------------------------------------------------------------------------------------------------------
// |  HOME  |  !  |  @  |  #  |  $     |  %     |            |  ^    |  &    |  *  |  (  |  )    |  BSPC  |
// |  END   |  "  |  '  |  `  |  <     |  >     |            |  -    |  =    |  [  |  ]  |  \    |  DEL   |
// |        |  `  |  ~  |     |  PGUP  |  PGDN  |            |  _    |  +    |  {  |  }  |  "|"  |        |
//                      |     |  NUM   |  SPC   |            |  ENT  |  SYM  |     |

                        bindings = <
   &kp  HOME  &kp  EXCL   &kp  AT          &kp  HASH   &kp  DLLR   &kp  PRCNT            &kp  CARET  &kp  AMPS   &kp  ASTRK  &kp  LPAR  &kp  RPAR  &trans
   &kp END    &kp  DQT    &kp  APOSTROPHE  &kp  GRAVE  &kp LT      &kp  DOT              &kp  MINUS  &kp  EQUAL  &kp  LBKT   &kp  RBKT  &kp  BSLH  &trans
   &none      &kp  TILDE  &kp  GRAVE       &none       &kp  PG_UP  &kp  PG_DN            &kp  UNDER  &kp  PLUS   &kp  LBRC   &kp  RBRC  &kp  PIPE  &none
                                           &none       &trans      &trans                &trans      &trans      &trans
                        >;
                };

                 function_layer {
            label = "FUN";
// ----------------------------------------------------------------------------------------------------------------------
// |  F1     |  F2   |  F3   |  F4   |  F5   |  F6   |            |  F7   |  F8      |  F9   |  F10   |   F11  |  F12   |
// |  BTCLR  |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |            |  PRV  |  PLAY/P  |  NXT  |  VOL-  |  MUTE  |  VOL+  |
// |         |       |       |       |       |       |            |       |          |       |        |        |        |
//                           |       |  NUM  |  SPC  |            |  ENT  |  SYM     |       |

                        bindings = <
   &kp  F1      &kp  F2        &kp  F3        &kp  F4        &kp  F5        &kp  F6                  &kp  F7      &kp  F8    &kp  F9      &kp  F10       &kp  F11     &kp  F12
   &bt  BT_CLR  &bt  BT_SEL 0  &bt  BT_SEL 1  &bt  BT_SEL 2  &bt  BT_SEL 3  &bt  BT_SEL 4            &kp  C_PREV  &kp  C_PP  &kp  C_NEXT  &kp  C_VOL_DN  &kp  C_MUTE  &kp  C_VOL_UP
   &none        &none          &none          &none          &none          &none                    &none        &none      &none        &none          &none        &none
                                              &none          &trans         &trans                   &trans       &trans     &trans
                        >;
                };
        };
};






